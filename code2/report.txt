Cat Badart and Will Badart
Final Project Report
December 13, 2015

We created a calculator with graphing capabilities.  The user can simply 
enter an expression he/she wishes to know the value of (eg. 5*6).  By typing 
an expression with a variable in it (eg. 5*x), the program automatically 
generates a graph in a new window.  There are a wide variety of settings
the user can manipulate: window width and height, color of the graph,
whether or not to put the next graph on the same set of axes or to open a
new window, whether or not to display the process of how calculations are
made, and changing the base of log (the default is base 10). The
instructions on how to change each of these settings are displayed in the
"help" menu when the program is first run, but you can view the menu at any
point by typing 'help'.  The user can also create a file with the settings 
in it and have the program read them in.  Lastly, the user can reset all 
the settings to their default by typing 'set refresh'. 

We leveraged A LOT of functions in our program.  The most important ones 
are parse, eval, plot, plugin, and settings.  
	parse: takes a string and an Expression * as inputs. It 
		reads through the string and analyzes whether certain 
		chunks of it are numbers, variables, operators, 
		functions, or parentheses and copies that information 
		into the appropriate columns of Expression* target.  
	eval: takes an Expression *, a starting point and an 
		ending point as inputs.  The start and end points are 
		necessary because eval is recursive, so those are the 
		conditions that are changed each time.  eval evaluates 
		expressions.  So when the user types in an expression with out 
		any variables, eval works like normal.  If there is a variable, 
		the program first goes to plot, which calls plugin, which calls 
		eval.  So eval eventually gets called every time an expression 
		is entered.
	plot: plot is called from main if the number of variables (n) in 
		Expression ex is 1.  Plot considers all the settings options then 
		(depending on the settings) opens a new window and calls on 
		drawAxes.  In order to draw the actual function, the color is set 
		based off of the default (white) or user input.  The functions 
		pix2val and val2pix convert the x and y pixel values into the 
		appropriate function values and vice versa.  
	plugin: is called from the plot function to obtain the y value for a 
		specified x value.  It sets the variable column of the expression 
		equal to whatever the passed x value is and calls eval to get the 
		resulting y value and returns it.
	settings: 
